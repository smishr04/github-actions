name: Run Azure Login with OIDC
on:
 push:
 workflow_dispatch:

permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

      - name: Retrieve VM Private IP
        id: get-vm-ip
        run: |
          private_ip=$(az vm list-ip-addresses \
            --name vm-test-actions \
            --resource-group rg-actions-test \
            --query "[].virtualMachine.network.privateIpAddresses[0]" \
            --output tsv)
          echo "PRIVATE_IP=$private_ip" >> $GITHUB_ENV

      - name: Display VM Private IP
        run: echo "The VM private IP address is $PRIVATE_IP"

     
      - name: Copy files to Azure Windows VM via PowerShell
        run: |
          # Install Azure PowerShell if not already installed
          pwsh -Command "Install-Module -Name Az -AllowClobber -Force"
      
          # Authenticate to Azure
          pwsh -Command "
          # Upload the file to the Windows VM
          pwsh -Command "
            $vmName = 'vm-test-actions'
            $resourceGroup = 'rg-actions-test'
            $username = 'actionvmadmin'
            $password = ${{ secrets.VMPASSWORD }}
            $fileToCopy = .
            $destinationPath = 'C:\\users\\actionvmadmin'
      
            # Get the private IP of the VM
            $privateIp = (Get-AzNetworkInterface | Where-Object { $_.VirtualMachine -and $_.VirtualMachine.Id -match $vmName }).IpConfigurations.PrivateIpAddress
      
            # Establish a PowerShell session with the VM
            $session = New-PSSession -ComputerName $privateIp -Credential (New-Object PSCredential($username, $password)) -UseSSL -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck)
      
            # Copy the file to the VM
            Copy-Item -Path $fileToCopy -Destination $destinationPath -ToSession $session
      
            # Close the session
            Remove-PSSession $session
          "
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
